<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>ES lesson 2</title>
</head>
<body>
	<script>
		//复制数组
		//循环-创建新数组
		//es6:数组的from()方法
		//es6:...arr方法
		
		window.onload=function(){
			//循环方法
			//------------------------------------------------------
			var arr=[2,4,5,3,1];
				function oFrom(arr){			
					
					var arr2=[];
					for (var i = arr.length - 1; i >= 0; i--) {
						arr2[i]=arr[i];
					}
					console.log(arr2);
					return arr2;
				}
			var arr2=oFrom(arr);//=>[2,4,5,3,1]
			arr.pop();
			console.log(arr,arr2);//=>数组独立，是值得复制
			//------------------------------------------------------
			//es6:from()方法
				
				var arr3=[5,1,1,3,4]
				var arr4=Array.from(arr3);
				console.log(arr3,arr4);//=>[5,1,1,3,4][5,1,1,3,4]
				arr3.pop();
				console.log(arr3,arr4);//=>[5,1,1,3][5,1,1,3,4]
				console.log(Array.from);//=>函数体
				console.log(typeof Array.from);//=>function

			//-----------------------------------------------------
			//=>对象的函数和函数的函数
				function outer(name,age,sex,from){
					//var this;
					this.name=name;
					this.age=age;
					this.sex=sex;
					this.from=function(from){
							var arr2=[];
							for (var i = arr.length - 1; i >= 0; i--) {
								arr2[i]=arr[i];
							}
							console.log(arr2);
							return arr2;
					}
					//return this;
				}
				var obj=new outer('hainan',24,'man');
				var obj2=new outer();
				console.log(obj,obj2);
			//-----------------------------------------------------
			//...Array=>3点操作符进行数组的复制
				
				var sandian=[22,33,2,1,3];
				var sandian2=[...sandian];
				console.log(sandian);
				console.log(sandian2);//=>ok
			
			//arguments对象不能使用数组方法,用...操作符复制外部参数列表
				function threePoint(...args){
					var ans=arr=>arr.map(x=>x*2-1);
					return ans(args);
				}
				threePoint(1,2,3);

				function abc(...args){
					console.log(args);
					console.log(arguments[0]==args);//=>true
					for(i in arguments){
						console.log(i,arguments[i]);
						console.log(args[i]);
						console.log(arguments[i]==args[i]);//=>true
					}
				}
				abc(1,2,3,2,1)
			//-----------------------------------------------------
			// for of 
			// 对比 for-loop for-in-loop for-of-loop
			var color=['red','yellow','blue','white','orange'];
			var animals={
				name:'cat',
				age:3,
				sex:'male',
				weight:'8kg'
			}

			//for-loop
			for(let i=0;i<color.length-1;i++){
				console.log(i,color[i]);		//=>ok
			}
			// for(let i=0;i<animals.length-1;i++){
			// 	console.log(i,animals[i])		//=>length 不可用
			// }
			//for-in-loop
			for(index in color){
				console.log(index,color[index]); //=>ok		
			}
			for(index in animals){
				console.log(index,animals[index]); //=>ok		
			}
			//for-of-loop
			for(name of color){
				console.log(name,color[name]);	//=>ok
			}
			// for(name of animals){
			// 	console.log(name,animals[name]);	//=>type err
			// }

			//总结：for-loop依赖对象的length属性，json或者稀松数组无法使用
			//总结：for-in可检索数组和json的属性名
			//总结：for-of检索数组的值，无法检索json
			//---------------------------------------------------
			
			//map对象
			var oMap=new Map(); //new map

			oMap.set('name','lili');
			oMap.set('age',20);
			oMap.set('sex','woman');
			oMap.set('weight',"49kg")//set the k-v

			console.log(oMap,typeof oMap);//omap type=object

			console.log(oMap.size);//size=>length

			console.log(oMap.entries);//entries=>function
			console.log(oMap.entries());//entries()=>{arr1,arr2,arr3}
			console.log(oMap.entries()[1,1]);//=>failed

			console.log(oMap.keys());//keys()=>名组成的对象
			console.log(oMap.values());//values()=>值组成的对象
			var mapName=oMap.get('name');//get()=>get the value
			console.log(mapName);
			delete oMap.age;
			delete oMap['age'];
			delete oMap.get('sex');//delete直删不好使...
			console.log(oMap);//=>not well
			oMap.delete('age');//delete()=>删除
			console.log(oMap);//well

			//for-in & map
			for(index in oMap){
				console.log(index);//=>nothing
			}
			//for-loop &map
			for(let i=0;i<oMap.size-1;i++){
				console.log(i,oMap.entries()[i]);//=>无法有效获取
			}
			//for-of &map
			for(value of oMap){
				console.log(value);
				console.log(typeof value);
				console.log(value instanceof Array);//双元素一维数组
			}
			for(value of oMap.entries()){
				console.log(value);
			}
			//map=map.entries();
			for([key,value] of oMap.entries()){
				console.log(key,value);//暗中使用映射
			}
			for(key of oMap.keys()){
				console.log(key,oMap.get(key));
				//loop keys()返回的名对象
			}
			for(value of oMap.values()){
				console.log(value);//loop values() 返回的值对象
			}

			//----------------------------------------------------
			//keys() & entries()
				var comjs={a:11,b:13,c:15,d:10};
				var comarr=[22,11,44,55];
				//console.log(comjs.keys());//json无法使用
				console.log(comarr.keys());//没效果
				//console.log(comjs.entries());//json无法使用
				console.log(comarr.entries());//没效果
				//keys()、values()不能直接用于数组和json
			// for(name of comjs.keys()){
			// 	console.log(name,comjs[name]);//=>keys完全不能用于json
			// }
			for(name of comarr.keys()){
				console.log(name,comarr[name]);//=>keys可以间接使用于数组
			}
			// for(value of comjs.values()){
			// 	console.log(value);//=>values()完全不能用于json
			// }
			for(value of comarr.values()){
				console.log(value);//=>values()完全不能用于数组
			}
			//总结：keys()&values()属于Map对象的方法
			//总结：keys()可以间接使用在数组上，其他情况均不支持数组和json
		}
	</script>
</body>
</html>
